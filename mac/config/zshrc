# Path to your oh-my-zsh installation.
export ZSH="/Users/${USER}/.oh-my-zsh"

ZSH_THEME="robbyrussell"

# Deletect platform
__OS__=""
if [[ $OSTYPE == "linux-gnu" ]]
then
    __OS__="linux"
elif [[ $OSTYPE == "darwin"* ]]
then
    __OS__="osx"
fi

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  colorize
  colored-man-pages
  command-not-found
  mosh
  ssh-agent
  zsh-autosuggestions
  web-search
)

source $ZSH/oh-my-zsh.sh

# Setup aliases
source ~/.aliases
# Use homebrew vim

# File search functions
function f() { find . -iname "*$1*" ${@:2} }
function r() { grep -R -n "$1" $2 }
function pub() { ssh-keygen -C "" -y -f $1 }

# codecount counts the code lines within the cwd recursively
# optional - ${1} - file extension filter
# NOTE: currently working only on zsh out of the box
function codecount() { wc -l **/*${1} 2>&1 | tail -n 1 }

# Whatismyip CLI
function whatismyip() { curl ifconfig.me }

# PDF merger
# Example: mergepdf output.pdf file1.pdf file2.pdf ....
mergepdf () {
  # NOTE: Use the binary here because the gs alias clashes with ghostscript
  # binary name
  /usr/local/bin/gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile="$1" "${@:2}"
}

# K8S functions
function kube_token { kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep eks-admin | awk '{print $1}') }
function kube_context { kubectl config use-context $1 }
function kube_be_token { echo $(kubectl get secrets/$(kubectl get sa/rhyme-backend -o=jsonpath="{.secrets[0].name}") -o=jsonpath="{.data.token}") | base64 -D }

# afk prints AFK
function afk() {
    clear
    figlet -W AFK
}

# text prints text with large characters
function text() {
    figlet -W ${1}
}

# ssh_tunnel_local tunnels local traffic to remote machine
# $1 - username
# $2 - remote_host
# $3 - remote_port
# $4 - local_port
# $5 - identity_file
function ssh_tunnel_local() {
    if [[ ${1} == "--help" ]]
    then
        echo "ssh_tunnel_local <username> <remote_host> <remote_port> <local_port> <identity_file>"
        return
    fi

    username=${1}
    remote_host=${2}
    remote_port=${3}
    local_port=${4}
    identity_file=${5}

    ssh -i ${identity_file} ${username}@${remote_host} -N -f -L ${remote_port}:127.0.0.1:${local_port}
}

# ssh_tunnel_remote tunnels remote traffic to local machine
# $1 - username
# $2 - remote_host
# $3 - remote_port
# $4 - local_port
# $5 - identity_file
function ssh_tunnel_remote() {
    if [[ ${1} == "--help" ]]
    then
        echo "ssh_tunnel_remote <username> <remote_host> <remote_port> <local_port> <identity_file>"
        return
    fi

    username=${1}
    remote_host=${2}
    remote_port=${3}
    local_port=${4}
    identity_file=${5}

    ssh -i ${identity_file} ${username}@${remote_host} -N -f -R ${remote_port}:127.0.0.1:${local_port}
}

# ping_scan does a quick ping scan for given IP range (start, to)
# usage: ping_scan 192.168.1.{0..255}
function ping_scan() {
    for i in ${1}
    do
        ping -c 1 -t 1 ${i} > /dev/null 2>&1 && echo ${i}
    done
}

# port_listen list all open listen ports on the system
function port_listen() {
    lsof -i -P -n | grep LISTEN
}

# check_ssl obtains information about SSL of given remote host
function ssl_check() {
    openssl s_client -servername ${1} -connect ${1}:443 2>/dev/null | openssl x509 -noout -dates
}


# set locale
export LC_ALL=en_US.UTF-8
# we don't like auto updates fckn homebrew ðŸ¤¯!
export HOMEBREW_NO_AUTO_UPDATE="1"

# Get some work down for f*ck sake!
echo "FUCKING WORK $(date +%V/54)"

# fzf setup
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# autojump
[ -f /usr/local/etc/profile.d/autojump.sh ] && . /usr/local/etc/profile.d/autojump.sh
[ -f /opt/homebrew/etc/profile.d/autojump.sh ] && . /opt/homebrew/etc/profile.d/autojump.sh

export PATH="$PATH:/Users/itsankov/.bin"
# Configured by setup.sh
export GOPATH=/Users/itsankov/developers/workspace
# Configured by setup.sh
export GOBIN=$GOPATH/bin
# Configured by setup.sh
export PATH="$PATH:$GOBIN"

export PATH="/opt/homebrew/bin:${PATH}"

# EXPORTS
export EDITOR=vim
alias vim=/opt/homebrew/bin/vim

export PATH="/opt/homebrew/opt/go@1.18/bin:$PATH"

# direnv hook injection
eval "$(direnv hook zsh)"
